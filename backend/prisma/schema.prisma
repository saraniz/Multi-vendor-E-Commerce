generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  reg_id      Int     @id @default(autoincrement())
  fullName    String
  username     String  @unique
  email       String  @unique
  password    String
  mobileNo    String
  gender      String
  address     String
  role        String  @default("customer")
  isSeller    Boolean @default(false)


  follows   follow[]
  carts     cart[]
  favorites favorite[]
  seller    seller?
  orders    order[]
  payments payment[]

  @@map("user")
}

model seller {
  seller_id  Int     @id @default(autoincrement())
  mobile_no1 String
  mobile_no2 String
  reg_id     Int     @unique
  store_id   Int     @unique
  isBlocked  Boolean @default(false)
  warning1   String?
  warning2   String?
  warning3   String?

  user  user  @relation(fields: [reg_id], references: [reg_id])
  store store @relation(fields: [store_id], references: [store_id])

  @@map("seller")
}

model product {
  product_id    Int     @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stock         Int
  store_id      Int
  category      String
  isPremium     Boolean
  product_image String?
  store_name    String
  store_image   String?

  store       store        @relation(fields: [store_id], references: [store_id])
  carts       cart[]
  favorites   favorite[]
  reviews     review[]
  order_items order_item[]

  @@map("product")
}

model store {
  store_id         Int     @id @default(autoincrement())
  store_name       String  @unique
  business_email   String  @unique
  business_regNo   String  @unique
  business_address String?
  store_image      String?

  seller   seller?
  products product[]
  follows  follow[]

  @@map("store")
}

model cart {
  cart_id       Int      @id @default(autoincrement())
  reg_id        Int
  product_id    Int
  quantity      Int      @default(1)
  price         String
  description   String
  created_at    DateTime @default(now())
  product_image String

  user    user    @relation(fields: [reg_id], references: [reg_id])
  product product @relation(fields: [product_id], references: [product_id])

  @@unique([reg_id, product_id])
  @@map("cart")
}

model favorite {
  fav_id     Int @id @default(autoincrement())
  reg_id     Int
  product_id Int

  user    user    @relation(fields: [reg_id], references: [reg_id])
  product product @relation(fields: [product_id], references: [product_id])

  @@unique([reg_id, product_id])
  @@map("favorite")
}

model review {
  review_id  Int    @id @default(autoincrement())
  content    String
  userName   String
  product_id Int

  product product @relation(fields: [product_id], references: [product_id])

  @@map("review")
}

model follow {
  follow_id   Int     @id @default(autoincrement())
  reg_id      Int
  store_id    Int
  is_followed Boolean @default(true)

  user  user  @relation(fields: [reg_id], references: [reg_id])
  store store @relation(fields: [store_id], references: [store_id])

  @@unique([reg_id, store_id], name: "reg_id_store_id")
  @@map("follow")
}

model order {
  order_id        Int      @id @default(autoincrement())
  reg_id          Int? // nullable for guests
  guest_name      String? // guest only
  guest_mobile    String? // guest only
  guest_address   String? // guest only
  total_price     Float
  courier_service String
  status          String
  order_date      DateTime @default(now())
  deliver_date    DateTime

  user        user?        @relation(fields: [reg_id], references: [reg_id])
  order_items order_item[]

  @@map("order")
}

model order_item {
  id         Int   @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int   @default(1)
  price      Float

  order   order   @relation(fields: [order_id], references: [order_id])
  product product @relation(fields: [product_id], references: [product_id])

  @@map("order_item")
}


model Advertisement {
  id        Int      @id @default(autoincrement()) 
  created_at DateTime @default(now())  
  imageUrl  String   @map("image_url")                                              
}

model payment {
  id              Int      @id @default(autoincrement())
  stripeSessionId String   @unique
  amount          Float
  status          String
  paymentMethod   String?
  createdAt       DateTime @default(now())
  reg_id          Int      //  FK to user table

  user user @relation(fields: [reg_id], references: [reg_id]) // Foreign key relation
}